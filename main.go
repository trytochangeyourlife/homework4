分布式限流：
1.单机限制：
优点：①实现简单。②稳定可靠。③性能高。
缺点：①流量不均匀会引发错误限制。②机器数变化时配额数要手动调整，容易出错。
2.动态流控：
优点：根据服务情况动态流控，不需要调整额度。
缺点：①需要主动收集请求的性能数据（cpu load 成功率耗时）。②客户端主动善意限流。③一般只限于接口调用，支持的范围小，应用场景狭窄。
3.全局限流：
优点：①流量不均不会触发限流。②机器数变动时候无需调整。③应用场景丰富，接口、DB等任何资源都可以使用。

熔断：
1.基于Google sre中的max(0, (requests - K*accepts) / (requests + 1))公式进行熔断。
2.基于熔断的 gutter kafka ，用于接管自动修复系统运行过程中的负载，这样只需要付出10%的资源就能解决部分系统可用性问题。

降级：
1.UI模块化，非核心模块降级。
2.BFF层聚合API，模块降级。
3.页面使用上一次缓存副本。
4.鉴于智能推送服务超时，使用默认值、热门推荐。
5.流量拦截+定期数据缓存（过期副本策略）。
6.页面降级、延迟服务、写/读降级、缓存降级。
7.抛异常、返回约定协议、mock数据、fallback处理。

重试的注意事项：
1.Nginx upstream retry 过大，导致服务雪崩。
2.业务不等幂导致的重试，造成数据重复。
3.多层级的重试传递，放大流量会造成雪崩。

负载均衡常用方式：
1.JSQ（最闲轮循）。
2.P2P算法。
